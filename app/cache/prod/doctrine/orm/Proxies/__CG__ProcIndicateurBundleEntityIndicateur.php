<?php

namespace Proxies\__CG__\Proc\IndicateurBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Indicateur extends \Proc\IndicateurBundle\Entity\Indicateur implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', '' . "\0" . 'Proc\\IndicateurBundle\\Entity\\Indicateur' . "\0" . 'id', '' . "\0" . 'Proc\\IndicateurBundle\\Entity\\Indicateur' . "\0" . 'libelleIndicateur', '' . "\0" . 'Proc\\IndicateurBundle\\Entity\\Indicateur' . "\0" . 'description', '' . "\0" . 'Proc\\IndicateurBundle\\Entity\\Indicateur' . "\0" . 'types', '' . "\0" . 'Proc\\IndicateurBundle\\Entity\\Indicateur' . "\0" . 'activite', '' . "\0" . 'Proc\\IndicateurBundle\\Entity\\Indicateur' . "\0" . 'nature', '' . "\0" . 'Proc\\IndicateurBundle\\Entity\\Indicateur' . "\0" . 'modeCalcul', '' . "\0" . 'Proc\\IndicateurBundle\\Entity\\Indicateur' . "\0" . 'subdivisions', '' . "\0" . 'Proc\\IndicateurBundle\\Entity\\Indicateur' . "\0" . 'periodicite', '' . "\0" . 'Proc\\IndicateurBundle\\Entity\\Indicateur' . "\0" . 'sousSecteur');
        }

        return array('__isInitialized__', '' . "\0" . 'Proc\\IndicateurBundle\\Entity\\Indicateur' . "\0" . 'id', '' . "\0" . 'Proc\\IndicateurBundle\\Entity\\Indicateur' . "\0" . 'libelleIndicateur', '' . "\0" . 'Proc\\IndicateurBundle\\Entity\\Indicateur' . "\0" . 'description', '' . "\0" . 'Proc\\IndicateurBundle\\Entity\\Indicateur' . "\0" . 'types', '' . "\0" . 'Proc\\IndicateurBundle\\Entity\\Indicateur' . "\0" . 'activite', '' . "\0" . 'Proc\\IndicateurBundle\\Entity\\Indicateur' . "\0" . 'nature', '' . "\0" . 'Proc\\IndicateurBundle\\Entity\\Indicateur' . "\0" . 'modeCalcul', '' . "\0" . 'Proc\\IndicateurBundle\\Entity\\Indicateur' . "\0" . 'subdivisions', '' . "\0" . 'Proc\\IndicateurBundle\\Entity\\Indicateur' . "\0" . 'periodicite', '' . "\0" . 'Proc\\IndicateurBundle\\Entity\\Indicateur' . "\0" . 'sousSecteur');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Indicateur $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setDescription($description)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDescription', array($description));

        return parent::setDescription($description);
    }

    /**
     * {@inheritDoc}
     */
    public function getDescription()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescription', array());

        return parent::getDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function setNature(\Proc\IndicateurBundle\Entity\Nature $nature = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNature', array($nature));

        return parent::setNature($nature);
    }

    /**
     * {@inheritDoc}
     */
    public function getNature()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNature', array());

        return parent::getNature();
    }

    /**
     * {@inheritDoc}
     */
    public function setModeCalcul(\Proc\IndicateurBundle\Entity\Mode_calcul $modeCalcul = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setModeCalcul', array($modeCalcul));

        return parent::setModeCalcul($modeCalcul);
    }

    /**
     * {@inheritDoc}
     */
    public function getModeCalcul()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getModeCalcul', array());

        return parent::getModeCalcul();
    }

    /**
     * {@inheritDoc}
     */
    public function setPeriodicite(\Proc\IndicateurBundle\Entity\Periodicite $periodicite = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPeriodicite', array($periodicite));

        return parent::setPeriodicite($periodicite);
    }

    /**
     * {@inheritDoc}
     */
    public function getPeriodicite()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPeriodicite', array());

        return parent::getPeriodicite();
    }

    /**
     * {@inheritDoc}
     */
    public function setSousSecteur(\Proc\IndicateurBundle\Entity\SousSecteur $sousSecteur = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSousSecteur', array($sousSecteur));

        return parent::setSousSecteur($sousSecteur);
    }

    /**
     * {@inheritDoc}
     */
    public function getSousSecteur()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSousSecteur', array());

        return parent::getSousSecteur();
    }

    /**
     * {@inheritDoc}
     */
    public function setActivite(\Proc\IndicateurBundle\Entity\Activite $activite = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setActivite', array($activite));

        return parent::setActivite($activite);
    }

    /**
     * {@inheritDoc}
     */
    public function getActivite()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getActivite', array());

        return parent::getActivite();
    }

    /**
     * {@inheritDoc}
     */
    public function addType(\Proc\IndicateurBundle\Entity\Type $types)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addType', array($types));

        return parent::addType($types);
    }

    /**
     * {@inheritDoc}
     */
    public function removeType(\Proc\IndicateurBundle\Entity\Type $types)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeType', array($types));

        return parent::removeType($types);
    }

    /**
     * {@inheritDoc}
     */
    public function getTypes()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTypes', array());

        return parent::getTypes();
    }

    /**
     * {@inheritDoc}
     */
    public function addSubdivision(\Proc\IndicateurBundle\Entity\Subdivision $subdivisions)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addSubdivision', array($subdivisions));

        return parent::addSubdivision($subdivisions);
    }

    /**
     * {@inheritDoc}
     */
    public function removeSubdivision(\Proc\IndicateurBundle\Entity\Subdivision $subdivisions)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeSubdivision', array($subdivisions));

        return parent::removeSubdivision($subdivisions);
    }

    /**
     * {@inheritDoc}
     */
    public function getSubdivisions()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSubdivisions', array());

        return parent::getSubdivisions();
    }

    /**
     * {@inheritDoc}
     */
    public function setLibelleIndicateur($libelleIndicateur)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLibelleIndicateur', array($libelleIndicateur));

        return parent::setLibelleIndicateur($libelleIndicateur);
    }

    /**
     * {@inheritDoc}
     */
    public function getLibelleIndicateur()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLibelleIndicateur', array());

        return parent::getLibelleIndicateur();
    }

}
