<?php

namespace Proxies\__CG__\ProjetBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Projet extends \ProjetBundle\Entity\Projet implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', '' . "\0" . 'ProjetBundle\\Entity\\Projet' . "\0" . 'id', '' . "\0" . 'ProjetBundle\\Entity\\Projet' . "\0" . 'nomProjet', '' . "\0" . 'ProjetBundle\\Entity\\Projet' . "\0" . 'objectifProjet', 'dateProjet', '' . "\0" . 'ProjetBundle\\Entity\\Projet' . "\0" . 'regions', '' . "\0" . 'ProjetBundle\\Entity\\Projet' . "\0" . 'entites', '' . "\0" . 'ProjetBundle\\Entity\\Projet' . "\0" . 'composantes', '' . "\0" . 'ProjetBundle\\Entity\\Projet' . "\0" . 'descriptifProjets');
        }

        return array('__isInitialized__', '' . "\0" . 'ProjetBundle\\Entity\\Projet' . "\0" . 'id', '' . "\0" . 'ProjetBundle\\Entity\\Projet' . "\0" . 'nomProjet', '' . "\0" . 'ProjetBundle\\Entity\\Projet' . "\0" . 'objectifProjet', 'dateProjet', '' . "\0" . 'ProjetBundle\\Entity\\Projet' . "\0" . 'regions', '' . "\0" . 'ProjetBundle\\Entity\\Projet' . "\0" . 'entites', '' . "\0" . 'ProjetBundle\\Entity\\Projet' . "\0" . 'composantes', '' . "\0" . 'ProjetBundle\\Entity\\Projet' . "\0" . 'descriptifProjets');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Projet $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setNomProjet($nomProjet)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNomProjet', array($nomProjet));

        return parent::setNomProjet($nomProjet);
    }

    /**
     * {@inheritDoc}
     */
    public function getNomProjet()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNomProjet', array());

        return parent::getNomProjet();
    }

    /**
     * {@inheritDoc}
     */
    public function setObjectifProjet($objectifProjet)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setObjectifProjet', array($objectifProjet));

        return parent::setObjectifProjet($objectifProjet);
    }

    /**
     * {@inheritDoc}
     */
    public function getObjectifProjet()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getObjectifProjet', array());

        return parent::getObjectifProjet();
    }

    /**
     * {@inheritDoc}
     */
    public function addRegion(\ZoneBundle\Entity\Region $regions)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addRegion', array($regions));

        return parent::addRegion($regions);
    }

    /**
     * {@inheritDoc}
     */
    public function removeRegion(\ZoneBundle\Entity\Region $regions)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeRegion', array($regions));

        return parent::removeRegion($regions);
    }

    /**
     * {@inheritDoc}
     */
    public function getRegions()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRegions', array());

        return parent::getRegions();
    }

    /**
     * {@inheritDoc}
     */
    public function addEntite(\Proc\UserBundle\Entity\Entite $entites)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addEntite', array($entites));

        return parent::addEntite($entites);
    }

    /**
     * {@inheritDoc}
     */
    public function removeEntite(\Proc\UserBundle\Entity\Entite $entites)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeEntite', array($entites));

        return parent::removeEntite($entites);
    }

    /**
     * {@inheritDoc}
     */
    public function getEntites()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEntites', array());

        return parent::getEntites();
    }

    /**
     * {@inheritDoc}
     */
    public function addComposante(\ProjetBundle\Entity\Composante $composantes)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addComposante', array($composantes));

        return parent::addComposante($composantes);
    }

    /**
     * {@inheritDoc}
     */
    public function removeComposante(\ProjetBundle\Entity\Composante $composantes)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeComposante', array($composantes));

        return parent::removeComposante($composantes);
    }

    /**
     * {@inheritDoc}
     */
    public function getComposantes()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getComposantes', array());

        return parent::getComposantes();
    }

    /**
     * {@inheritDoc}
     */
    public function setDateProjet($dateProjet)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDateProjet', array($dateProjet));

        return parent::setDateProjet($dateProjet);
    }

    /**
     * {@inheritDoc}
     */
    public function getDateProjet()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDateProjet', array());

        return parent::getDateProjet();
    }

    /**
     * {@inheritDoc}
     */
    public function addDescriptifProjet(\ProjetBundle\Entity\Descriptif_projet $descriptifProjets)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addDescriptifProjet', array($descriptifProjets));

        return parent::addDescriptifProjet($descriptifProjets);
    }

    /**
     * {@inheritDoc}
     */
    public function removeDescriptifProjet(\ProjetBundle\Entity\Descriptif_projet $descriptifProjets)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeDescriptifProjet', array($descriptifProjets));

        return parent::removeDescriptifProjet($descriptifProjets);
    }

    /**
     * {@inheritDoc}
     */
    public function getDescriptifProjets()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescriptifProjets', array());

        return parent::getDescriptifProjets();
    }

}
